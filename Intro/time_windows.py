# -*- coding: utf-8 -*-
"""Time_windows.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rZBIKqTNrNV0VeouSuRxfk-MwhrU9ekJ
"""

import tensorflow as tf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""# Time windows
train a model to forecast the next step given the previous 20 steps

---
so lets create a dataset with a 20 step window for training

"""

dataset = tf.data.Dataset.range(20)
for val in dataset:
  print(val.numpy())

dataset = tf.data.Dataset.range(20)
dataset = dataset.window(5,shift=1)
for window_dataset in dataset:
  for val in window_dataset:
    print(val.numpy(),end=' ')
  print()

dataset = tf.data.Dataset.range(20)
dataset = dataset.window(5, shift=1, drop_remainder=True)
for window_dataset in dataset:
    for val in window_dataset:
        print(val.numpy(), end=" ")
    print()

dataset = tf.data.Dataset.range(20)
dataset = dataset.window(5,shift=1,drop_remainder=True)
dataset = dataset.flat_map(lambda window: window.batch(5))
for window in dataset:
  print(window.numpy())

dataset = tf.data.Dataset.range(20)
dataset = dataset.window(5,shift=1,drop_remainder=True)
dataset = dataset.flat_map(lambda window:window.batch(5))
dataset = dataset.map(lambda window : (window[:-1],window[-1:]))

for x,y in dataset:
  print(x.numpy(),y.numpy())

dataset = tf.data.Dataset.range(20)
dataset = dataset.window(5,shift=1,drop_remainder=True)
dataset = dataset.flat_map(lambda window:window.batch(5))

dataset = dataset.map(lambda window:(window[:-1],window[-1:]))
dataset = dataset.shuffle(buffer_size=10)

for x,y in dataset:
  print(x.numpy(),y.numpy())

dataset = tf.data.Dataset.range(20)
dataset = dataset.window(5, shift=1, drop_remainder=True)
dataset = dataset.flat_map(lambda window: window.batch(5))
dataset = dataset.map(lambda window: (window[:-1], window[-1:]))
dataset = dataset.shuffle(buffer_size=20)
dataset = dataset.batch(2).prefetch(1)
for x,y in dataset:
  print("x = ",x.numpy())
  print("y = ",y.numpy())

"""# Will make any time series into a tensorflow dataset"""

def window_dataset(series, window_size, batch_size=32,
                   shuffle_buffer=1000):
    dataset = tf.data.Dataset.from_tensor_slices(series)
    dataset = dataset.window(window_size + 1, shift=1, drop_remainder=True)
    dataset = dataset.flat_map(lambda window: window.batch(window_size + 1))
    dataset = dataset.shuffle(shuffle_buffer)
    dataset = dataset.map(lambda window: (window[:-1], window[-1]))
    dataset = dataset.batch(batch_size).prefetch(1)
    return dataset

"""# Make a model forecast """

def model_forecast(model,series,window_size):
  ds = tf.data.Dataset.from_tensor_slices(series)
  ds = ds.window(window_size,shift=1,drop_remainder=True)
  ds = ds.flat_map(lambda w: w.batch(window_size))
  ds = ds.batch(32).prefetch(1)
  return model.predict(ds)


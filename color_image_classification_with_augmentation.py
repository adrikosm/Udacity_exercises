# -*- coding: utf-8 -*-
"""color_image_classification_with_augmentation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hSu7TLso-_xffHxeQsegwzYMC3wO_dr6
"""

import tensorflow as tf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import logging 
import os

# Set logging level
logger = tf.get_logger()
logger.setLevel(logging.ERROR)

URL = 'https://storage.googleapis.com/mledu-datasets/cats_and_dogs_filtered.zip'
zip_dir = tf.keras.utils.get_file('cats_and_dogs_filtered.zip',origin=URL,extract=True)

base_dir = os.path.join(os.path.dirname(zip_dir),'cats_and_dogs_filtered')
train_dir = os.path.join(base_dir,'train')
validation_dir = os.path.join(base_dir,'validation')

train_cats_dir = os.path.join(train_dir,'cats')
train_dogs_dir = os.path.join(train_dir,'dogs')
validation_cats_dir = os.path.join(validation_dir,'cats')
validation_dogs_dir = os.path.join(validation_dir,'dogs')

num_cats_tr = len(os.listdir(train_cats_dir))
num_dogs_tr = len(os.listdir(train_dogs_dir))

num_cats_eval = len(os.listdir(validation_cats_dir))
num_dogs_eval = len(os.listdir(validation_dogs_dir))

total_train = num_cats_tr +  num_dogs_tr
total_val = num_cats_eval + num_dogs_eval

print('Total training cat images: ',num_cats_tr)
print('Total training dog images',num_dogs_tr)

print('Total validation cat images: ',num_cats_eval)
print('Total validation dog images: ',num_dogs_eval)

print('---------------')

print("Total training images: ",total_train)
print("Total validation images: ",total_val)

BATCH_SIZE = 100
IMG_SHAPE = 150

# This function will plot images 
def plot_images(images):
  fig , axes = plt.subplots(1,5,figsize=(20,20))
  axes = axes.flatten()
  for img,ax in zip(images,axes):
    ax.imshow(img)
  plt.tight_layout()
  plt.show()

"""### Rotating the image"""

image_gen = ImageDataGenerator(rescale=1./255,horizontal_flip=True)

train_data_gen = image_gen.flow_from_directory(batch_size=BATCH_SIZE,
                                               directory=train_dir,
                                               shuffle=True,
                                               target_size=(IMG_SHAPE,IMG_SHAPE))

augmented_images = [train_data_gen[0][0][0] for i in range(5)]
plot_images(augmented_images)

image_gen = ImageDataGenerator(rescale=1./255, rotation_range=45)

train_data_gen = image_gen.flow_from_directory(batch_size=BATCH_SIZE,
                                               directory=train_dir,
                                               shuffle=True,
                                               target_size=(IMG_SHAPE, IMG_SHAPE))

augmented_images = [train_data_gen[0][0][0] for i in range(5)]
plot_images(augmented_images)

"""### Applying Zoom"""

# image_gen = ImageDataGenerator(rescale=1./255,zoom_range=0.5)

# train_data_gen = image_gen.flow_from_directory(batch_size=BATCH_SIZE,
#                                                directory=train_dir,
#                                                shuffle=True,
#                                                target_size=(IMG_SHAPE,IMG_SHAPE))

# augmented_images = [train_data_gen[0][0][0] for i in range(5)]
# plot_images(augmented_images)

"""# Putting all the changes together"""

image_gen_train = ImageDataGenerator(
      rescale = 1./255,
      rotation_range = 40 ,
      width_shift_range = 0.2,
      height_shift_range = 0.2,
      shear_range = 0.2,
      zoom_range = 0.2,
      horizontal_flip = True,
      fill_mode='nearest'
) 
train_data_gen = image_gen_train.flow_from_directory(batch_size = BATCH_SIZE,
                                                     directory = train_dir,
                                                     shuffle = True,
                                                     target_size=(IMG_SHAPE,IMG_SHAPE),
                                                     class_mode='binary')

augmented_images = [train_data_gen[0][0][0] for i in range(5)]
plot_images(augmented_images)

image_gen_val = ImageDataGenerator(rescale=1./255)

val_data_gen = image_gen_val.flow_from_directory(batch_size=BATCH_SIZE,
                                                 directory=validation_dir,
                                                 target_size=(IMG_SHAPE, IMG_SHAPE),
                                                 class_mode='binary')

"""# Model creation

"""

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(IMG_SHAPE, IMG_SHAPE, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),

    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Dropout(0.3),

    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(2)
])

model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

model.summary()

"""## Training the model"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# 
# EPOCHS = 100
# 
# my_callbacks = [
#     tf.keras.callbacks.EarlyStopping(patience = 4),
#     tf.keras.callbacks.ModelCheckpoint(filepath='model.{epoch:02d}-{val_loss:.2f}.h5')
# ]
# 
# history = model.fit(
#     train_data_gen,
#     steps_per_epoch=int(np.ceil(total_train / float(BATCH_SIZE))),
#     epochs=EPOCHS,
#     callbacks = my_callbacks,
#     validation_data=val_data_gen,
#     validation_steps=int(np.ceil(total_val / float(BATCH_SIZE)))
# )
#

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']

print("Total training accuracy :",max(acc))
print("Total validation accuracy :",max(val_acc))

loss = history.history['loss']
val_loss = history.history['val_loss']

epochs_range = range(len(acc))

plt.figure(figsize=(10, 10))
plt.subplot(1, 2, 1)
plt.plot(epochs_range, acc, label='Training Accuracy')
plt.plot(epochs_range, val_acc, label='Validation Accuracy')
plt.legend(loc='lower right')
plt.title('Training and Validation Accuracy')

plt.subplot(1, 2, 2)
plt.plot(epochs_range, loss, label='Training Loss')
plt.plot(epochs_range, val_loss, label='Validation Loss')
plt.legend(loc='upper right')
plt.title('Training and Validation Loss')
plt.show()

